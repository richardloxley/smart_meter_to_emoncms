#!/usr/bin/php
<?php


// config file: "smart_meter_to_emoncms.ini"
// should be in the same directory as this script

$CONFIG_FILE = dirname(__FILE__) . "/smart_meter_to_emoncms.ini";



$CONFIG = parse_ini_file($CONFIG_FILE);

if ($CONFIG === false)
{
	echo "Couldn't open configuration file: $CONFIG_FILE\n";
	exit(1);
}




function nowInUtc()
{
	return dateInUtc("now");
}


function dateInUtc($date)
{
	return date_create($date, timezone_open("UTC"));
}


function convertToUtc($datetime)
{
	$utcDatetime = clone $datetime;
	date_timezone_set($utcDatetime, timezone_open("UTC"));
	return $utcDatetime;
}


function formatIsoDateTime($datetime)
{
	return date_format($datetime, "c");
}


function formatZuluDateTime($datetime)
{
	return date_format(convertToUtc($datetime), "Y-m-d\TH:i:s\Z");
}


function formatDate($datetime)
{
	return date_format($datetime, "Y-m-d");
}


function timestampToUtc($timestamp)
{
	return date_create_from_format("U", $timestamp, timezone_open("UTC"));
}


function getCalorificValue($datetime)
{
	global $CONFIG;

	if (!$CONFIG["GAS_REGION"] || $CONFIG["GAS_REGION"] === "")
	{
		return $CONFIG["DEFAULT_CALORIFIC_VALUE"];
	}

	$date = formatDate($datetime);

	$params = array
	(
		"applicableFor" => "Y",
		"latestFlag" => "Y",
		"dateType" => "GASDAY",
		"type" => "XML",
		"ids" => $CONFIG["GAS_REGION"],
		"dateFrom" => $date,
		"dateTo" => $date
	);

	$curl = curl_init($CONFIG["CALORIFIC_VALUE_URL"]);
	curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($params));
	curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
	curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
	$data = curl_exec($curl);
	curl_close($curl);

	if ($data === false)
	{
		// no data
		return -1;
	}
	else
	{
		// don't output errors, just return false if XML failed to load
		libxml_use_internal_errors(true);

		$xml = simplexml_load_string($data);

		if ($xml === false)
		{
			// wasn't XML
			return -1;
		}

		if (isset($xml->dataItem) && isset($xml->dataItem->Value))
		{
			return $xml->dataItem->Value;
		}
		else
		{
			// no data yet for that date
			return -1;
		}
	}
}



function getConsumption($n3rgyUrl, $startDate, $endDate)
{
	global $CONFIG;

	$consumption = array();

	$headers = array
	(
		"Authorization: " . $CONFIG["MAC_ADDRESS"]
	);

	// meter uses end of half hour period
	date_add($startDate, date_interval_create_from_date_string("30 minutes"));

	// n3rgy requires dates in format YYMMDDhhmmss with no timezone
	// by inspection I've assumed they require UTC, as the data they return is in UTC
	$start = date_format($startDate, "YmdHi");
	$end = date_format($endDate, "YmdHi");

	$url = $n3rgyUrl . "?start=" . $start . "&end=" . $end;

	$curl = curl_init($url);
	curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
	curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
	$data = curl_exec($curl);
	curl_close($curl);

	if ($data === false)
	{
		echo "No response from server\n";
		echo "URL: $url\n";
		return null;
	}
	else
	{
		$json = json_decode($data, true);
		// var_dump($json);

		if ($json === null)
		{
			echo "No data for the selected period\n";
			echo "URL: $url\n";
			return null;
		}

		if (isset($json["message"]))
		{
			echo "Server returned message: " . $json["message"] . "\n";
			echo "URL: $url\n";
		}

		if (isset($json["errors"]))
		{
			echo "Server returned errors\n";
			echo "URL: $url\n";

			foreach ($json["errors"] as $error)
			{
				echo "Error " . $error["code"] . ": " . $error["message"] . "\n";
			}

			return null;
		}

		if (!isset($json["granularity"]))
		{
			echo "Cannot determine granularity\n";
			echo "URL: $url\n";
			echo "JSON response:\n";
			var_dump($json);
			return null;
		}

		if ($json["granularity"] !== "halfhour")
		{
			echo "Granularity is not halfhour [" . $json["granularity"] . "]\n";
			echo "URL: $url\n";
			return null;
		}

		if (isset($json["unit"]))
		{
			$units = $json["unit"];

			if ($units !== "kWh" && $units !== "m3")
			{
				echo "Unknown units [$units]\n";
				echo "URL: $url\n";
				return null;
			}
		}
		else
		{
			// for some reason the production API doesn't return units,
			// so assume no units means it's kWh
			$units = "kWh";
		}

		if (isset($json["values"]))
		{
			$values = $json["values"];

			$cv_date = "";
			$cv = -1;

			foreach ($values as $entry)
			{
				if (isset($entry["timestamp"]) && isset($entry["value"]))
				{
					$time = $entry["timestamp"];
					$value = $entry["value"];

					if ($value == 16777.215 || $value == 2147483.647 || $value == 4294967.295)
					{
						// if the meter cannot read the current value, it can return:
						// 0x00FFFFFF == 16777215
						// 0x7FFFFFFF == 2147483647
						// 0xFFFFFFFF == 4294967295
						// see
						// https://github.com/n3rgy/data/issues/1
						// https://github.com/n3rgy/data/issues/11
						$value = 0;
					}

					// time is end of half hour period, so convert it to the start
					$datetime = dateInUtc($time);
					date_sub($datetime, date_interval_create_from_date_string("30 minutes"));

					$date = formatDate($datetime);

					if ($units === "kWh")
					{
						$consumption[] =
						[
							"date"	=> $datetime,
							"m3"	=> -1,
							"cv"	=> -1,
							"kwh"	=> $value
						];
					}
					else
					{
						// units are m3 so convert to kWh using calorific value

						if ($cv_date != $date)
						{
							$cv_date = $date;
							$cv = getCalorificValue(dateInUtc($cv_date));
						}

						if ($cv > 0)
						{
							$m3 = $value;
							$kwh = $m3 * $CONFIG["VOLUME_CORRECTION_FACTOR"] * $cv / 3.6;

							$consumption[] =
							[
								"date"	=> $datetime,
								"m3"	=> $m3,
								"cv"	=> $cv,
								"kwh"	=> $kwh
							];
						}
						else
						{
							// no calorific value yet available, so don't record this figure
							// (it will be picked up on subsequent runs, when the CV may be available)

							if ($CONFIG["DEBUG"])
							{
								echo "No CV yet for reading: " . date_format($datetime, "Y-m-d H:i") . "\n";
							}
						}
					}
				}
			}
		}
	}

	return $consumption;
}



function sendConsumptionToEmoncms($emoncmsInputLabel, $consumption)
{
	global $CONFIG;

	if (!$consumption || sizeof($consumption) == 0)
	{
		// no readings to send
		return;
	}

	foreach ($consumption as $entry)
	{
		// slot is half an hour so kilowatts = 2 * kWh
		// watts = kilowatts * 1000
		$watts = 2 * $entry["kwh"] * 1000;

		$date = urlencode(formatIsoDateTime($entry["date"]));

		$url = $CONFIG["EMONCMS_URL"] . "/input/post.json?apikey=" . $CONFIG["EMONCMS_KEY"] . "&fulljson={\"time\":\"$date\",\"$emoncmsInputLabel\":$watts}";
		$curl = curl_init($url);
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
		$data = curl_exec($curl);
		curl_close($curl);

		if ($data === false)
		{
			echo "Error sending data to Emoncms\n";
			exit(1);
		}
		else
		{
			$json = json_decode($data, true);
			//var_dump($json);

			if ($json === null)
			{
				echo "No JSON response from Emoncms\n";
				exit(1);
			}

			if (!isset($json["success"]))
			{
				echo "Emoncms didn't report success status\n";
				exit(1);
			}

			if ($json["success"] !== true)
			{
				echo "Emoncms reported failure\n";
				exit(1);
			}
		}
	}
}


// may be null if Emoncms doesn't yet have a "Log to feed" process
function getEmoncmsFeedId($emoncmsInputLabel)
{
	global $CONFIG;

	$url = $CONFIG["EMONCMS_URL"] . "/input/get/?apikey=" . $CONFIG["EMONCMS_KEY"];

	$curl = curl_init($url);
	curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
	$data = curl_exec($curl);
	curl_close($curl);

	if ($data === false)
	{
		echo "Error sending request to Emoncms\n";
		exit(1);
	}
	else
	{
		$json = json_decode($data, true);
		//var_dump($json);

		if ($json === null)
		{
			echo "No JSON response from Emoncms\n";
			exit(1);
		}

		$list = $json[0];

		if (!$list)
		{
			echo "Emoncms didn't return input list\n";
			exit(1);
		}

		if (!isset($list[$emoncmsInputLabel]))
		{
			// Emoncms doesn't have that input yet
			return null;
		}

		$input = $list[$emoncmsInputLabel];

		if (!isset($input["processList"]))
		{
			// Emoncms doesn't yet have a process list
			return null;
		}

		// process list is comma separated list of process IDs and feed IDs
		// 	e.g. 1:29,4:30
		// process IDs are listed in .../emoncms/Modules/process/process_processlist.php
		// we're interested in process ID 1 "Log to feed" as we want to find the ID of
		// the feed that contains the raw values of the input

		$LOG_TO_FEED_PROCESS_ID = "1";

		$feedID = null;

		$processList = str_getcsv($input["processList"]);

		foreach ($processList as $process)
		{
			// split out x:y into array
			$pair = str_getcsv($process, ":");
			if ($pair[0] == $LOG_TO_FEED_PROCESS_ID)
			{
				$feedID = $pair[1];
				break;
			}
		}

		// may be null if Emoncms doesn't yet have a "Log to feed" process
		return $feedID;
	}
}


// may be null if Emoncms doesn't yet have that input or doesn't yet have a "Log to feed" process for that input
function getDateOfLastEmoncmsReading($emoncmsInputLabel)
{
	$feedID = getEmoncmsFeedId($emoncmsInputLabel);

	if ($feedID === null)
	{
		return null;
	}

	global $CONFIG;
	$url = $CONFIG["EMONCMS_URL"] . "/feed/timevalue.json?apikey=" . $CONFIG["EMONCMS_KEY"] . "&id=" . $feedID;

	$curl = curl_init($url);
	curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
	$data = curl_exec($curl);
	curl_close($curl);

	if ($data === false)
	{
		echo "Error sending request to Emoncms\n";
		exit(1);
	}
	else
	{
		$json = json_decode($data, true);
		//var_dump($json);

		if ($json === null)
		{
			echo "No JSON response from Emoncms\n";
			exit(1);
		}

		if (!isset($json["time"]))
		{
			// Emoncms doesn't have any values in that feed yet
			return null;
		}

		$timestamp = $json["time"];

		return timestampToUtc($timestamp);
	}
}


function debugConsumption($emoncmsInputLabel, $consumption)
{
	global $CONFIG;

	if ($CONFIG["DEBUG"] && $consumption !== null)
	{
		if (sizeof($consumption) > 0)
		{
			echo "$emoncmsInputLabel:\n";
			echo "Date/time\t\tm3\tcalorific value\tkWh\n";

			foreach ($consumption as $value)
			{
				echo date_format($value["date"], "Y-m-d H:i");
				echo "\t";
				echo $value["m3"];
				echo "\t";
				echo $value["cv"];
				echo "\t";
				echo "\t";
				echo $value["kwh"];
				echo "\n";
			}
		}
		else
		{
			// readings were empty, so we got an answer, but there were no new values
			echo "$emoncmsInputLabel is up-to-date\n";
		}
	}
}


function downloadDataAndSendToEmooncms($n3rgyUrl, $emoncmsInputLabel)
{
	global $CONFIG;

	if (!$n3rgyUrl || $n3rgyUrl === "" || !$emoncmsInputLabel || $emoncmsInputLabel === "")
	{
		return;
	}

	$lastReadingTime = getDateOfLastEmoncmsReading($emoncmsInputLabel);

	if ($lastReadingTime)
	{
		// send any new readings to EmonCMS

		// start one 30 min slot beyond last reading so we don't duplicate it
		$start = clone $lastReadingTime;
		date_add($start, date_interval_create_from_date_string("30 minutes"));

		$end = nowInUtc();

		$consumption = getConsumption($n3rgyUrl, $start, $end);

		$noDataWarnDays = $CONFIG["NO_DATA_WARN_DAYS"];
		$comparisonDate = date_sub(nowInUtc(), date_interval_create_from_date_string("$noDataWarnDays days"));

		if (($consumption === null || count($consumption) == 0) && $lastReadingTime < $comparisonDate)
		{
			echo "No data for $emoncmsInputLabel for at least $noDataWarnDays days\n";
			echo "Try re-authorising your access at " . $CONFIG["REAUTHORISE_URL"] . "\n";
			echo "    using MPAN = " . $CONFIG["MPAN"] . "\n";
			echo "    and MAC = " . $CONFIG["MAC_ADDRESS"] . "\n";
		}

		debugConsumption($emoncmsInputLabel, $consumption);
		sendConsumptionToEmoncms($emoncmsInputLabel, $consumption);
	}
	else
	{
		// no readings in EmonCMS yet

		// we need to create an input - but we don't want to send all the readings yet, as the user
		// will have to configure the feeds they want after the input is created

		// so let's create one dummy entry just before the first reading that's actually available

		// we look back for the last 90 days (as n3rgy can output no more than 90 days of data)

		$start = nowInUtc();
		date_sub($start, date_interval_create_from_date_string("90 days"));

		$end = nowInUtc();
		$consumption = getConsumption($n3rgyUrl, $start, $end);

		$earliestReadingDate = $consumption[0]["date"];
		date_sub($earliestReadingDate, date_interval_create_from_date_string("30 minutes"));

		$dummyConsumption = array();
		$dummyConsumption[] =
		[
			"date"	=> $earliestReadingDate,
			"m3"	=> -1,
			"cv"	=> -1,
			"kwh"	=> 0
		];

		sendConsumptionToEmoncms($emoncmsInputLabel, $dummyConsumption);

		echo "Created EmonCMS input \"$emoncmsInputLabel\".\n";
		echo "**** IMPORTANT **** create any feeds that depend on this input before running this script again.\n";
	}
}

downloadDataAndSendToEmooncms($CONFIG["ELECTRICITY_CONSUMPTION_URL"], $CONFIG["EMONCMS_ELECTRICITY_INPUT"]);
downloadDataAndSendToEmooncms($CONFIG["ELECTRICITY_PRODUCTION_URL"], $CONFIG["EMONCMS_ELECTRICITY_PRODUCTION_INPUT"]);
downloadDataAndSendToEmooncms($CONFIG["GAS_CONSUMPTION_URL"], $CONFIG["EMONCMS_GAS_INPUT"]);

